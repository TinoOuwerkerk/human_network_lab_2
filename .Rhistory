visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
# Question 2
# Correlation High school network
ggplot() +
geom_point(aes(degree_n, betweenness_n)) +
geom_smooth(aes(degree_n, betweenness_n), method="lm") +
stat_cor(aes(degree_n, betweenness_n), method = "pearson")
ggplot() +
geom_point(aes(degree_n, closeness_n)) +
geom_smooth(aes(degree_n, closeness_n), method="lm") +
stat_cor(aes(degree_n, closeness_n), method = "pearson")
ggplot() +
geom_point(aes(degree_n, eigen_n$vector)) +
geom_smooth(aes(degree_n, eigen_n$vector), method="lm") +
stat_cor(aes(degree_n, eigen_n$vector), method = "pearson")
# Correlation Facebook network
degree_n_fb = (degree(Facebook, mode = "all"))
closeness_n_fb = (closeness(Facebook, normalized = TRUE))
betweenness_n_fb = betweenness(Facebook, directed = FALSE, normalized = TRUE)
eigen_n_fb = eigen_centrality(Facebook)
ggplot() +
geom_point(aes(degree_n_fb, betweenness_n_fb)) +
geom_smooth(aes(degree_n_fb, betweenness_n_fb), method="lm") +
stat_cor(aes(degree_n_fb, betweenness_n_fb), method = "pearson")
ggplot() +
geom_point(aes(degree_n_fb, closeness_n_fb)) +
geom_smooth(aes(degree_n_fb, closeness_n_fb), method="lm") +
stat_cor(aes(degree_n_fb, closeness_n_fb), method = "pearson")
ggplot() +
geom_point(aes(degree_n_fb, eigen_n_fb$vector)) +
geom_smooth(aes(degree_n_fb, eigen_n_fb$vector), method="lm") +
stat_cor(aes(degree_n_fb, eigen_n_fb$vector), method = "pearson")
h_distance =
distances(
Highschool,
v = V(Highschool),
to = V(Highschool),
mode = c("all", "out", "in"),
weights = NULL)
#Shortest path lengths between every pair of two nodes in the high school network
fb_distance =
distances(
Facebook,
v = V(Facebook),
to = V(Facebook),
mode = c("all", "out", "in"),
weights = NULL)
#Shortest path lengths between every pair of two nodes in the Facebook network
dd_facebook<- degree_distribution(Facebook)
# Convert degree distribution to data frame
degree_distribution <- data.frame(degree = seq(1:length(dd_facebook)),
frequency = dd_facebook)
probs = c(0.5, 0.9)
quantiles <- quantile(degree_FB, prob=probs)
facebook_edge<-read.csv("Facebook_network_edge.csv",header=FALSE)
#call library
library(igraph)
library(RColorBrewer)
library(visNetwork)
library(ggplot2)
library(tidyverse)
library(ggpubr)
setwd("C:/Users/tinot/uu/human_network_lab_2")
#datainput
highschool_edge<-read.csv("Highschool_network_edge.csv",header=FALSE)
highschool_att<-read.csv("Highschool_network_att.csv",header = TRUE)
facebook_edge<-read.csv("Facebook_network_edge.csv",header=FALSE)
facebook_att<-read.csv("Facebook_network_att.csv",header = TRUE)
n=40
ER1 <- sample_gnp(n, 0.05, directed = FALSE, loops = FALSE)
ER2 <- sample_gnp(n, 0.1, directed = FALSE, loops = FALSE)
ER3 <- sample_gnp(n, 0.2, directed = FALSE, loops = FALSE)
ER1000 <- sample_gnp(1000, 0.2, directed = FALSE, loops= FALSE)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
transitivity(Highschool)
average.path.length(Highschool)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
transitivity(Highschool)
average.path.length('average path length:',Highschool)
print('average path length:', average.path.length(Highschool))
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
transitivity(Highschool)
print('average path length:', average.path.length(Highschool))
print('average path length:' + average.path.length(Highschool))
print('average path length:' & average.path.length(Highschool))
print('average path length:' + average.path.length(Highschool))
print(average.path.length(Highschool))
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
transitivity(Highschool)
print('average path length:')
print(average.path.length(Highschool))
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print(transitivity)
transitivity(Highschool)
print(average path length:)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print("transitivity:")
transitivity(Highschool)
print("average path length:")
average.path.length(Highschool)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity:')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
highschool
Highschool
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- mean_distance(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(highschool)
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*2) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.5) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.3) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.2) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.1) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.05) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.02) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.015) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.014) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.013) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.012) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:'avg_path_length))
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:', avg_path_length))
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(new_avg_path_length)
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
}
}
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:', avg_path_length))
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste('deleted edge:', highschool_edges[i,1], "-", highschool_edges[i,2]))
print(new_avg_path_length)
}
}
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:', avg_path_length))
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste('deleted edge:', highschool_edges[i,1], "-", highschool_edges[i,2]))
print(paste0('new_avg_path_length:' ,new_avg_path_length))
}
}
