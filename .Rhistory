<<<<<<< HEAD
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
transitivity(Highschool)
print('average path length:', average.path.length(Highschool))
print('average path length:' + average.path.length(Highschool))
print('average path length:' & average.path.length(Highschool))
print('average path length:' + average.path.length(Highschool))
print(average.path.length(Highschool))
=======
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
infected_greedy(107, Highschool, Highschool, Highschool, Highschool,p =  0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.1){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
node_number <- paste(sample(1:122, 1))
for (i in 0:1000){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 21, 9), 28)
}
tel1 = as.integer(tel1/1000)
tel2 = as.integer(tel2/1000)
tel3 = as.integer(tel3/1000)
tel4 = as.integer(tel4/1000)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
infected_greedy(107, Highschool, Highschool, Highschool, Highschool,p =  0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
infected_greedy(107, Highschool, Highschool, Highschool, Highschool,p =  0.15)
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.1){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 21, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
# node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 21, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
# node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 21, 4), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
# node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 96, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
# node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 4, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
# node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 4, 96), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
# node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 21, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes of 100 MC simulations in Highschool network")
)+
theme_minimal()
}
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
# node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 21, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes of 100 MC simulations in Highschool network(Contagion IC p =0.15)")
)+
theme_minimal()
}
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
# node_number <- paste(sample(1:122, 1))
for (i in 0:100){
tel1 = tel1 + IC(node_number, network1, p, c(), 28)
tel2 = tel2 + IC(node_number, network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC(node_number, network3, p, c(37, 4, 96 ), 28)
tel4 = tel4 + IC(node_number, network4, p, c(37, 21, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel4, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes of 100 MC simulations in Highschool network")
)+
theme_minimal()
}
infected_greedy(107, Highschool, Highschool, Highschool, Highschool, p =  0.15)
infected_with_greedy <- function(network1, network2, network3,network4, p=0.1){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
for (i in 0:99){
tel1 = tel1 + IC("107", network1, p,c(), 28)
tel2 = tel2 + IC("107", network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC("107", network3, p, c(37,4, 96 ), 28)
tel4 = tel4 + IC("107", network4, p, c(37, 21, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Greedy'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
final_number <- function(node_number, network1, network2, network3, network4, p=0.15){
sum1 = 0
sum2 = 0
sum3 = 0
sum4 = 0
# node_number <- paste(sample(1:300, 1))
for (i in 0:99){
no_immune <- IC(node_number, network1, p)
degree_immune <- IC(node_number, network2, p, c(54,20, 110))
betweenness_immune <- IC(node_number, network3, p, c(37,4, 96 ))
greedy = IC(node_number, network4, p, c(37, 21, 9), 28)
sum1= sum1 + sum(no_immune)
sum2= sum2 + sum(degree_immune)
sum3= sum3 + sum(betweenness_immune)
sum4= sum4 + sum(betweenness_immune)
}
sum1 = as.integer(sum1/100)
sum2 = as.integer(sum2/100)
sum3 = as.integer(sum3/100)
sum4 = as.integer(sum4/100)
len <- 1:length(sum1)-1
return(c(sum1,sum2,sum3, sum4))
}
final_number(107, Highschool, Highschool, Highschool, Highschool,p =  0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
final_number(107, Highschool, Highschool, Highschool, Highschool,p =  0.5)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
final_number(107, Highschool, Highschool, Highschool, Highschool,p =  0.1)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
# infected_greedy(Highschool, Highschool, Highschool,Highschool, 0.15)
final_number_greedy(107, Highschool, Highschool, Highschool, Highschool,p =  0.01)
final_number_greedy <- function(node_number, network1, network2, network3, network4, p=0.15){
sum1 = 0
sum2 = 0
sum3 = 0
sum4 = 0
# node_number <- paste(sample(1:300, 1))
for (i in 0:99){
no_immune <- IC(node_number, network1, p)
degree_immune <- IC(node_number, network2, p, c(54,20, 110))
betweenness_immune <- IC(node_number, network3, p, c(37,4, 96 ))
greedy = IC(node_number, network4, p, c(37, 21, 9), 28)
sum1= sum1 + sum(no_immune)
sum2= sum2 + sum(degree_immune)
sum3= sum3 + sum(betweenness_immune)
sum4= sum4 + sum(betweenness_immune)
}
sum1 = as.integer(sum1/100)
sum2 = as.integer(sum2/100)
sum3 = as.integer(sum3/100)
sum4 = as.integer(sum4/100)
len <- 1:length(sum1)-1
return(c(sum1,sum2,sum3, sum4))
}
final_number_greedy(107, Highschool, Highschool, Highschool, Highschool,p =  0.01)
c <- c()
for (i in seq(0, 0.5, 0.1)){
c <-append(c, final_number(SW3,SW3, SW3,p=i))
}
knitr::opts_chunk$set(echo = TRUE)
#call library
library(igraph)
library(RColorBrewer)
library(visNetwork)
library(ggplot2)
library(tidyverse)
library(ggpubr)
# setwd("C:/Users/tinot/uu/human_network_lab_2")
#datainput
highschool_edge<-read.csv("Highschool_network_edge.csv",header=FALSE)
highschool_att<-read.csv("Highschool_network_att.csv",header = TRUE)
>>>>>>> 4d595ac6c3cbed2857011d7dd17eaac715db21be
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
<<<<<<< HEAD
transitivity(Highschool)
print('average path length:')
print(average.path.length(Highschool))
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print(transitivity)
transitivity(Highschool)
print(average path length:)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print("transitivity:")
transitivity(Highschool)
print("average path length:")
average.path.length(Highschool)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity:')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
highschool
Highschool
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- mean_distance(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length) {
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste(highschool_edges[i,1], "-", highschool_edges[i,2]))
=======
stopifnot(require(data.table))
stopifnot(require(Matrix))
calculate_value <- function(node, each_neighbors,Pprob){
return(each_neighbors[[node]][ which(runif(length(each_neighbors[[node]]), 0, 1)<=Pprob)])
#'runif' is a function to generate random number in R
>>>>>>> 4d595ac6c3cbed2857011d7dd17eaac715db21be
}
#This function:
#1) searches the neighbors of contagious node;
#2) To those who are connected to a contagious node, generates a random number and compare to the
#probability of p, if random number<p, this node will be infected and return the value of 1
IC<-function(node_seed,network,Pprob, immunized = c(), n_days = 28 ){
#prepare input for the 'calculate_value' function#
adj_matrix <- igraph::as_adjacency_matrix(network, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1]) #get the neigbhour list of each node
nNode<-vcount(network)
node_status <- rep.int(0, nNode) #start from a healthy population
day_infected<-vector()#Total number of infected population
new_infected <- list() # Record the ID of person getting infected at each time step
day<-1
node_status[as.numeric(node_seed)] <- 1 # infected(value=1) health(value=0)
day_infected[day] <- sum(node_status)
new_infected[[day]]<-node_seed #The ID of the person infected in Day 1 (Patient Zero)
infected_number = 0
number_day <- c()
#simulate the spread of virus within 4 weeks##
for (day in c(2:n_days)){
ContagiousID<-which(node_status == 1)
infectedID<-unlist(lapply(ContagiousID,calculate_value,each_neighbors,Pprob))
infectedID <- setdiff(infectedID, immunized)
newinfectedID<- setdiff(infectedID, which(node_status == 1))
#Update the node status and other variables
node_status[newinfectedID] <- 1
day_infected[day] <- length(newinfectedID)
infected_number = infected_number + length(newinfectedID)
new_infected[[day]]<-newinfectedID
number_day <- append(number_day, infected_number)
day=day+1
}
return(day_infected ) #return the number of newly infected people by day
#return(list(day_infected,new_infected)) #if you want to see the ID of infected ppl in each day,use this command instead
}
degree_n = (degree(Highschool, mode = "all")) %>% sort(T)
degree_n[1:3]
betweenness_n = (betweenness(Highschool)) %>% sort(T)
betweenness_n[1:3]
no_immune <- IC("107", Highschool, 0.1)
degree_immune <- IC("107", Highschool, 0.1, c(54,20, 110))
betweenness_immune <- IC("107", Highschool, 0.1, c(37,4, 96 ))
days <- seq(1:28)
immune_df <- data.frame(days= days,
not_immune = no_immune,
degree_immuned = degree_immune,
betweenness_immuned = betweenness_immune)
data_long <- melt(immune_df, id = "days")
sum(no_immune)
sum(degree_immune)
sum(betweenness_immune)
final_number <- function(network1, network2, network3, p=0.8){
sum1 = 0
sum2= 0
sum3= 0
node_number <- paste(sample(1:300, 1))
for (i in 0:99){
no_immune <- IC(node_number, network1, p)
degree_immune <- IC(node_number, network2, p, c(54,20, 110))
betweenness_immune <- IC(node_number, network3, p, c(37,4, 96 ))
sum1= sum1 + sum(no_immune)
sum2= sum2 + sum(degree_immune)
sum3= sum3 + sum(betweenness_immune)
}
sum1 = as.integer(sum1/100)
sum2 = as.integer(sum2/100)
sum3 = as.integer(sum3/100)
len <- 1:length(sum1)-1
return(c(sum1,sum2,sum3))
}
infected <- function(network1, network2, network3,network4, p=0.1){
tel1 = 0
tel2 = 0
tel3 = 0
tel4 = 0
for (i in 0:99){
tel1 = tel1 + IC("107", network1, p,c(), 28)
tel2 = tel2 + IC("107", network2, p, c(54,20, 110), 28)
tel3 = tel3 + IC("107", network3, p, c(37,4, 96 ), 28)
tel4 = tel4 + IC("107", network4, p, c(37, 21, 9), 28)
}
tel1 = as.integer(tel1/100)
tel2 = as.integer(tel2/100)
tel3 = as.integer(tel3/100)
tel4 = as.integer(tel4/100)
len <- 1:length(tel1)-1
ggplot() + geom_smooth(aes(len, tel1, colour='No Immunity'), se =F) +
geom_smooth(aes(len, tel2, colour='Degree heuristic'), se =F) +
geom_smooth(aes(len, tel3, colour='Betweenness heuristic'), se =F) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))+
labs(x = "Days", y = "Average Number of infected nodes", title = paste("Average Number of infected nodes in Barabasi model")
)+
theme_minimal()
}
infected(Highschool, Highschool, Highschool, 0.15)
c <- c()
for (i in seq(0, 0.5, 0.1)){
c <-append(c, final_number(SW3,SW3, SW3,p=i))
}
<<<<<<< HEAD
#call library
library(igraph)
library(RColorBrewer)
library(visNetwork)
library(ggplot2)
library(tidyverse)
library(ggpubr)
# setwd("C:/Users/tinot/uu/human_network_lab_2")
#datainput
highschool_edge<-read.csv("Highschool_network_edge.csv",header=FALSE)
highschool_att<-read.csv("Highschool_network_att.csv",header = TRUE)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity:')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
li = list()
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:', avg_path_length))
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
li <- append(li, i)
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste('deleted edge:', highschool_edges[i,1], "-", highschool_edges[i,2]))
print(paste0('new_avg_path_length:', new_avg_path_length))
}
}
stopifnot(require(data.table))
stopifnot(require(Matrix))
calculate_value <- function(node, each_neighbors,Pprob){
return(each_neighbors[[node]][ which(runif(length(each_neighbors[[node]]), 0, 1)<=Pprob)])
#'runif' is a function to generate random number in R
}
#This function:
#1) searches the neighbors of contagious node;
#2) To those who are connected to a contagious node, generates a random number and compare to the
#probability of p, if random number<p, this node will be infected and return the value of 1
IC<-function(node_seed,network,Pprob){
#prepare input for the 'calculate_value' function#
adj_matrix <- igraph::as_adjacency_matrix(network, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1]) #get the neigbhour list of each node
nNode<-vcount(network)
node_status <- rep.int(0, nNode) #start from a healthy population
day_infected<-vector()#Total number of infected population
new_infected <- list() # Record the ID of person getting infected at each time step
day<-1
node_status[as.numeric(node_seed)] <- 1 # infected(value=1) health(value=0)
day_infected[day] <- sum(node_status )
new_infected[[day]]<-node_seed #The ID of the person infected in Day 1 (Patient Zero)
#simulate the spread of virus within 4 weeks##
for (day in c(2:28)){
ContagiousID<-which(node_status == 1)
infectedID<-unlist(lapply(ContagiousID,calculate_value,each_neighbors,Pprob))
newinfectedID<- setdiff(infectedID, which(node_status == 1))
#Update the node status and other variables
node_status[newinfectedID] <- 1
day_infected[day] <- length(newinfectedID)
new_infected[[day]]<-newinfectedID
day=day+1
}
return(day_infected) #return the number of newly infected people by day
#return(list(day_infected,new_infected)) #if you want to see the ID of infected ppl in each day,use this command instead
}
tel = 0
for (i in 0:99){
tel = tel + IC("5", Highschool, 0.15)
}
as.integer(tel/100)
# Delete edges that reduce average path length
Highschool2 <- delete.edges(Highschool, li)
# Identify strong ties using edge betweenness
eb <- edge_betweenness(Highschool2)
strong_edges <- which(eb >= quantile(eb, 0.989)) #strongest edges of the network (highest betweennes)
strong_ties <- E(Highschool2)[strong_edges] # Select the strongest ties
Highschool3 <- delete.edges(Highschool2, strong_ties)
strong_ties
Highschool_interactive_layout2<-visNetwork(data.frame(id=V(Highschool2)$name),
highschool_edges, main = "Highschool2",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout2
infected <- function(network1, network2, network3, p=0.15){
tel1 = 0
tel2 = 0
tel3 = 0
for (i in 0:99){
tel1 = tel1 + IC("5", network1, p)
tel2 = tel2 + IC("5", network2, p)
tel3 = tel3 + IC("5", network3, p)
}
tel = as.integer(tel/100)
print(tel)
len <- 1:length(tel)-1
ggplot() + geom_smooth(aes(len, tel1, color='black')) +
geom_smooth(aes(len, tel2, color='red')) +
geom_smooth(aes(len, tel3, color='blue')) +
scale_fill_discrete(labels=c('Highschool', 'Highschool2', 'Highschool3'))
}
infected(Highschool, Highschool2, Highschool3)
infected(Highschool, Highschool2, Highschool3, 0.01)
infected(Highschool, Highschool2, Highschool3, 0.9)
# Identify strong ties using k-core algorithm
coreness(Highschool2)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(G)[which(k_cores == max(k_cores))]
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the strongest k-core subgraph
print(strong_ties)
#Highschool3 <- delete.edges(Highschool2, strong_ties)
strong_ties
Highschool_interactive_layout2<-visNetwork(data.frame(id=V(Highschool2)$name),
highschool_edges, main = "Highschool2",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout2<-visNetwork(data.frame(id=V(Highschool2)$name),
highschool_edges, main = "Highschool2",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout2
=======
c
final_number(SW3,SW3, SW3,p=0.06)
final_number_greedy(107, Highschool, Highschool, Highschool, Highschool,p =  0.1)
final_number_greedy(107, Highschool, Highschool, Highschool, Highschool,p =  0.06)
>>>>>>> 4d595ac6c3cbed2857011d7dd17eaac715db21be
