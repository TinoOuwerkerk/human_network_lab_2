library(ggpubr)
# setwd("C:/Users/tinot/uu/human_network_lab_2")
#datainput
highschool_edge<-read.csv("Highschool_network_edge.csv",header=FALSE)
highschool_att<-read.csv("Highschool_network_att.csv",header = TRUE)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity:')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
li = list()
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:', avg_path_length))
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
li <- append(li, i)
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste('deleted edge:', highschool_edges[i,1], "-", highschool_edges[i,2]))
print(paste0('new_avg_path_length:', new_avg_path_length))
}
}
stopifnot(require(data.table))
stopifnot(require(Matrix))
calculate_value <- function(node, each_neighbors,Pprob){
return(each_neighbors[[node]][ which(runif(length(each_neighbors[[node]]), 0, 1)<=Pprob)])
#'runif' is a function to generate random number in R
}
#This function:
#1) searches the neighbors of contagious node;
#2) To those who are connected to a contagious node, generates a random number and compare to the
#probability of p, if random number<p, this node will be infected and return the value of 1
IC<-function(node_seed,network,Pprob){
#prepare input for the 'calculate_value' function#
adj_matrix <- igraph::as_adjacency_matrix(network, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1]) #get the neigbhour list of each node
nNode<-vcount(network)
node_status <- rep.int(0, nNode) #start from a healthy population
day_infected<-vector()#Total number of infected population
new_infected <- list() # Record the ID of person getting infected at each time step
day<-1
node_status[as.numeric(node_seed)] <- 1 # infected(value=1) health(value=0)
day_infected[day] <- sum(node_status )
new_infected[[day]]<-node_seed #The ID of the person infected in Day 1 (Patient Zero)
#simulate the spread of virus within 4 weeks##
for (day in c(2:28)){
ContagiousID<-which(node_status == 1)
infectedID<-unlist(lapply(ContagiousID,calculate_value,each_neighbors,Pprob))
newinfectedID<- setdiff(infectedID, which(node_status == 1))
#Update the node status and other variables
node_status[newinfectedID] <- 1
day_infected[day] <- length(newinfectedID)
new_infected[[day]]<-newinfectedID
day=day+1
}
return(day_infected) #return the number of newly infected people by day
#return(list(day_infected,new_infected)) #if you want to see the ID of infected ppl in each day,use this command instead
}
tel = 0
for (i in 0:99){
tel = tel + IC("5", Highschool, 0.15)
}
as.integer(tel/100)
# Delete edges that reduce average path length
Highschool2 <- delete.edges(Highschool, li)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
delete.edges(Highschool2, 'S20-S112')
delete.edges(Highschool2, 'S20|S112')
delete.edges(Highschool2, ['S20|S112', 'S112-S1'])
delete.edges(Highschool2, list('S20|S112', 'S112-S1'))
delete.edges(Highschool2, list('S20|S112', 'S112|S1'))
delete.edges(Highschool2, list('S20|S112')#, 'S112|S1'))
Highschool_interactive_layout2<-visNetwork(data.frame(id=V(Highschool2)$name),
Highschool_interactive_layout2<-visNetwork(data.frame(id=V(Highschool2)$name),
highschool_edges, main = "Highschool2",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout2
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
delete.edges(Highschool2, list('S20|S112', 'S112|S1'))
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
delete.edges(Highschool2, list('S20|S112', 'S110|S52'))
delete.edges(Highschool2, list('S20|S112'#, 'S110|S52'))
delete.edges(Highschool2, list('S20|S112')#, 'S110|S52'))
delete.edges(Highschool2, list('S20|S112')#, 'S110|S52'))
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
#call library
library(igraph)
library(RColorBrewer)
library(visNetwork)
library(ggplot2)
library(tidyverse)
library(ggpubr)
# setwd("C:/Users/tinot/uu/human_network_lab_2")
#datainput
highschool_edge<-read.csv("Highschool_network_edge.csv",header=FALSE)
highschool_att<-read.csv("Highschool_network_att.csv",header = TRUE)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity:')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
li = list()
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:', avg_path_length))
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
li <- append(li, i)
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste('deleted edge:', highschool_edges[i,1], "-", highschool_edges[i,2]))
print(paste0('new_avg_path_length:', new_avg_path_length))
}
}
stopifnot(require(data.table))
stopifnot(require(Matrix))
calculate_value <- function(node, each_neighbors,Pprob){
return(each_neighbors[[node]][ which(runif(length(each_neighbors[[node]]), 0, 1)<=Pprob)])
#'runif' is a function to generate random number in R
}
#This function:
#1) searches the neighbors of contagious node;
#2) To those who are connected to a contagious node, generates a random number and compare to the
#probability of p, if random number<p, this node will be infected and return the value of 1
IC<-function(node_seed,network,Pprob){
#prepare input for the 'calculate_value' function#
adj_matrix <- igraph::as_adjacency_matrix(network, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1]) #get the neigbhour list of each node
nNode<-vcount(network)
node_status <- rep.int(0, nNode) #start from a healthy population
day_infected<-vector()#Total number of infected population
new_infected <- list() # Record the ID of person getting infected at each time step
day<-1
node_status[as.numeric(node_seed)] <- 1 # infected(value=1) health(value=0)
day_infected[day] <- sum(node_status )
new_infected[[day]]<-node_seed #The ID of the person infected in Day 1 (Patient Zero)
#simulate the spread of virus within 4 weeks##
for (day in c(2:28)){
ContagiousID<-which(node_status == 1)
infectedID<-unlist(lapply(ContagiousID,calculate_value,each_neighbors,Pprob))
newinfectedID<- setdiff(infectedID, which(node_status == 1))
#Update the node status and other variables
node_status[newinfectedID] <- 1
day_infected[day] <- length(newinfectedID)
new_infected[[day]]<-newinfectedID
day=day+1
}
return(day_infected) #return the number of newly infected people by day
#return(list(day_infected,new_infected)) #if you want to see the ID of infected ppl in each day,use this command instead
}
tel = 0
for (i in 0:99){
tel = tel + IC("5", Highschool, 0.15)
}
as.integer(tel/100)
# Delete edges that reduce average path length
Highschool2 <- delete.edges(Highschool, li)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
# Define a list of edge strings to delete
edge_strings_to_delete <- c('S20-S112','S112-S1', 'S110-S52', 'S107-S28', 'S64-S58')
# Convert edge strings to edge indices
edges_to_delete <- as_edgelist(Highschool2, names = FALSE)[match(edge_strings_to_delete, lapply(as_edgelist(g, names = FALSE), paste, collapse = "-")), 1]
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
# Define a list of edge strings to delete
edge_strings_to_delete <- c('S20-S112','S112-S1', 'S110-S52', 'S107-S28', 'S64-S58')
# Convert edge strings to edge indices
edges_to_delete <- as_edgelist(Highschool2, names = FALSE)[match(edge_strings_to_delete, lapply(as_edgelist(Highschool2, names = FALSE), paste, collapse = "-")), 1]
delete.edges(Highschool2, edges_to_delete)
---
title: "excercise3"
print(edges_to_delete)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
#call library
library(igraph)
library(RColorBrewer)
library(visNetwork)
library(ggplot2)
library(tidyverse)
library(ggpubr)
# setwd("C:/Users/tinot/uu/human_network_lab_2")
#datainput
highschool_edge<-read.csv("Highschool_network_edge.csv",header=FALSE)
highschool_att<-read.csv("Highschool_network_att.csv",header = TRUE)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity:')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
li = list()
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:', avg_path_length))
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
li <- append(li, i)
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste('deleted edge:', highschool_edges[i,1], "-", highschool_edges[i,2]))
print(paste0('new_avg_path_length:', new_avg_path_length))
}
}
stopifnot(require(data.table))
stopifnot(require(Matrix))
calculate_value <- function(node, each_neighbors,Pprob){
return(each_neighbors[[node]][ which(runif(length(each_neighbors[[node]]), 0, 1)<=Pprob)])
#'runif' is a function to generate random number in R
}
#This function:
#1) searches the neighbors of contagious node;
#2) To those who are connected to a contagious node, generates a random number and compare to the
#probability of p, if random number<p, this node will be infected and return the value of 1
IC<-function(node_seed,network,Pprob){
#prepare input for the 'calculate_value' function#
adj_matrix <- igraph::as_adjacency_matrix(network, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1]) #get the neigbhour list of each node
nNode<-vcount(network)
node_status <- rep.int(0, nNode) #start from a healthy population
day_infected<-vector()#Total number of infected population
new_infected <- list() # Record the ID of person getting infected at each time step
day<-1
node_status[as.numeric(node_seed)] <- 1 # infected(value=1) health(value=0)
day_infected[day] <- sum(node_status )
new_infected[[day]]<-node_seed #The ID of the person infected in Day 1 (Patient Zero)
#simulate the spread of virus within 4 weeks##
for (day in c(2:28)){
ContagiousID<-which(node_status == 1)
infectedID<-unlist(lapply(ContagiousID,calculate_value,each_neighbors,Pprob))
newinfectedID<- setdiff(infectedID, which(node_status == 1))
#Update the node status and other variables
node_status[newinfectedID] <- 1
day_infected[day] <- length(newinfectedID)
new_infected[[day]]<-newinfectedID
day=day+1
}
return(day_infected) #return the number of newly infected people by day
#return(list(day_infected,new_infected)) #if you want to see the ID of infected ppl in each day,use this command instead
}
tel = 0
for (i in 0:99){
tel = tel + IC("5", Highschool, 0.15)
}
#call library
library(igraph)
library(RColorBrewer)
library(visNetwork)
library(ggplot2)
library(tidyverse)
library(ggpubr)
# setwd("C:/Users/tinot/uu/human_network_lab_2")
#datainput
highschool_edge<-read.csv("Highschool_network_edge.csv",header=FALSE)
highschool_att<-read.csv("Highschool_network_att.csv",header = TRUE)
#build high school network
highschool_nodes<-data.frame(name=as.character(highschool_att$NodeID),
gender=as.character(highschool_att$Gender),
hall=as.character(highschool_att$Hall))
highschool_edges<-data.frame(from=c(as.character(highschool_edge[,1])),
to=c(as.character(highschool_edge[,2])))
Highschool<-graph_from_data_frame(highschool_edges,directed = FALSE,vertices =
highschool_nodes)
co <- components(Highschool)
Highschool <- induced.subgraph(Highschool, which(co$membership == which.max(co$csize)))
#use only the largest component for analysis
summary(Highschool)
Highschool_interactive_layout<-visNetwork(data.frame(id=V(Highschool)$name),
highschool_edges, main = "Highschool",submain="Can zoom in/out to check the IDs and
ties") %>%
visIgraphLayout(layout = "layout_nicely",smooth = FALSE) %>%
visNodes(shape="circle",label = TRUE) %>%
visOptions(highlightNearest = list(enabled = T, hover = T), nodesIdSelection = T)
Highschool_interactive_layout
print('transitivity:')
transitivity(Highschool)
print('average path length:')
average.path.length(Highschool)
li = list()
avg_path_length <- average.path.length(Highschool)
print(paste0('avg path length:', avg_path_length))
for (i in 1:nrow(highschool_edges)) {
# remove an edge
graph2 <- delete.edges(Highschool, i)
# Calculate the new average path length
new_avg_path_length <- average.path.length(graph2)
# Check if the new average path length is greater than the current one
if (new_avg_path_length > avg_path_length*1.0125) {
li <- append(li, i)
# Print out the IDs of the source and target nodes for the edge that was removed
print(paste('deleted edge:', highschool_edges[i,1], "-", highschool_edges[i,2]))
print(paste0('new_avg_path_length:', new_avg_path_length))
}
}
stopifnot(require(data.table))
stopifnot(require(Matrix))
calculate_value <- function(node, each_neighbors,Pprob){
return(each_neighbors[[node]][ which(runif(length(each_neighbors[[node]]), 0, 1)<=Pprob)])
#'runif' is a function to generate random number in R
}
#This function:
#1) searches the neighbors of contagious node;
#2) To those who are connected to a contagious node, generates a random number and compare to the
#probability of p, if random number<p, this node will be infected and return the value of 1
IC<-function(node_seed,network,Pprob){
#prepare input for the 'calculate_value' function#
adj_matrix <- igraph::as_adjacency_matrix(network, type = 'both')
each_neighbors <- which(adj_matrix > 0, arr.ind = TRUE)
each_neighbors <- split(each_neighbors[, 2], each_neighbors[, 1]) #get the neigbhour list of each node
nNode<-vcount(network)
node_status <- rep.int(0, nNode) #start from a healthy population
day_infected<-vector()#Total number of infected population
new_infected <- list() # Record the ID of person getting infected at each time step
day<-1
node_status[as.numeric(node_seed)] <- 1 # infected(value=1) health(value=0)
day_infected[day] <- sum(node_status )
new_infected[[day]]<-node_seed #The ID of the person infected in Day 1 (Patient Zero)
#simulate the spread of virus within 4 weeks##
for (day in c(2:28)){
ContagiousID<-which(node_status == 1)
infectedID<-unlist(lapply(ContagiousID,calculate_value,each_neighbors,Pprob))
newinfectedID<- setdiff(infectedID, which(node_status == 1))
#Update the node status and other variables
node_status[newinfectedID] <- 1
day_infected[day] <- length(newinfectedID)
new_infected[[day]]<-newinfectedID
day=day+1
}
return(day_infected) #return the number of newly infected people by day
#return(list(day_infected,new_infected)) #if you want to see the ID of infected ppl in each day,use this command instead
}
tel = 0
for (i in 0:99){
tel = tel + IC("5", Highschool, 0.15)
}
as.integer(tel/100)
# Delete edges that reduce average path length
Highschool2 <- delete.edges(Highschool, li)
# Identify strong ties using k-core algorithm
k_cores <- coreness(Highschool2)
# Extract the nodes that belong to the strongest k-core subgraph
strong_ties <- V(Highschool2)[which(k_cores == max(k_cores))]
# Print the nodes in the stronges
print(strong_ties)
list1 <- list('S20|S112','S112|S1', 'S110|S52', 'S107|S28', 'S64|S58')
delete.edges(Highschool2, list1)
